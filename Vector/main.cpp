#include <iostream>
#include "../BinaryTrees/BinaryTree.h"
#include <vector>

//1. –ü–æ –ø–æ–¥–∞–¥–µ–Ω –µ–ª–µ–º–µ–Ω—Ç elem –≤—Ä—ä—â–∞ –∏—Ç–µ—Ä–∞—Ç–æ—Ä (—É–∫–∞–∑–∞—Ç–µ–ª) –∫—ä–º
//–ø—ä—Ä–≤–∏—è –Ω–∞–º–µ—Ä–µ–Ω –µ–ª–µ–º–µ–Ω—Ç –æ—Ç –º–∞—Å–∏–≤–∞ —Ä–∞–≤–µ–Ω –Ω–∞ elem –∏–ª–∏
//–∏—Ç–µ—Ä–∞—Ç–æ—Ä –∫—ä–º –∫—Ä–∞—è –Ω–∞ –º–∞—Å–∏–≤–∞ (nullptr) –∞–∫–æ –Ω–µ —Å—ä–¥—ä—Ä–∂–∞ elem.
template<typename T>
T *contains(std::vector<T> &vector,const T &elem) {
    for (size_t i = 0; i < vector.size(); i++) {
        if (vector[i] == elem)
            return &vector[i];
    }
    return nullptr;
}

//2. –í—Ä—ä—â–∞ –∫–æ–ø–∏–µ –Ω–∞ –º–∞—Å–∏–≤–∞, –Ω–æ —Å –µ–ª–µ–º–µ–Ω—Ç–∏—Ç–µ –º—É –≤ –æ–±—Ä–∞—Ç–µ–Ω —Ä–µ–¥.
//–í—Ö–æ–¥: [ 1, 5, 6, 2, 0 ]
//–ò–∑—Ö–æ–¥: [ 0, 2, 6, 5, 1 ] / –Ω–æ–≤ –º–∞—Å–∏–≤
template<typename T>
std::vector<T> &reverse(std::vector<T> &vector) {
    std::vector<T> reversed = {};
    for (const auto &item: vector) {
        reversed.push_back(item);
    }
    for (size_t i = 0; i < vector.size(); i++) {
        vector[i] = reversed[vector.size() - i - 1];
    }
    return vector;
}

//3. –ü–æ –ø–æ–¥–∞–¥–µ–Ω –º–∞—Å–∏–≤ –ø—Ä–æ–≤–µ—Ä—è–≤–∞ –¥–∞–ª–∏ –≤—Å–∏—á–∫–∏ –µ–ª–µ–º–µ–Ω—Ç–∏ –æ—Ç –≤—Ç–æ—Ä–∏—è
//–º–∞—Å–∏–≤ —Å–µ —Å—ä–¥—ä—Ä–∂–∞—Ç –≤ –ø—ä—Ä–≤–∏—è.
//–í—Ö–æ–¥: ( [ 1, 5, 6, 2, 0 ], [ 0, 5, 1 ] )
//–ò–∑—Ö–æ–¥: true
template<typename T>
bool containsIn(std::vector<T> &vec1, std::vector<T> &vec2) {
    int cnt = 0;
    for (int i = 0; i < vec2.size(); ++i) {
        for (int j = 0; j < vec1.size(); ++j) {
            if (vec1[j] == vec2[i])
                cnt++;
        }
    }
    return cnt == vec2.size();
}

//4. –ü–æ –ø–æ–¥–∞–¥–µ–Ω–∞ —Ñ—É–Ω–∫—Ü–∏—è –ø—Ä–∏–ª–∞–≥–∞ —Ñ—É–Ω–∫—Ü–∏—è—Ç–∞ –≤—ä—Ä—Ö—É –≤—Å–µ–∫–∏ –µ–ª–µ–º–µ–Ω—Ç
//–Ω–∞ –º–∞—Å–∏–≤–∞.
//–ü—Ä–∏–º–µ—Ä: void square( int& num ) { num *= num; }
//–í—Ö–æ–¥: ( [ 1, 5, 6, 2, 0 ], square )
//–ò–∑—Ö–æ–¥: [ 1, 25, 36, 4, 0 ]

template<typename T, class Func>
std::vector<T> &map(std::vector<T> &vector, Func func) {
    for (auto &item: vector) {
        item = func(item);
    }
    return vector;
}

//5. –ü–æ –ø–æ–¥–∞–¥–µ–Ω –ø—Ä–µ–¥–∏–∫–∞—Ç (–±—É–ª–µ–≤–∞ —Ñ—É–Ω–∫—Ü–∏—è) –≤—Ä—ä—â–∞ –Ω–æ–≤ –º–∞—Å–∏–≤
//—Å—ä–¥—ä—Ä–∂–∞—â —Ç–µ–∑–∏ –µ–ª–µ–º–µ–Ω—Ç–∏—Ç–µ –Ω–∞ –æ—Ä–∏–≥–∏–Ω–∞–ª–Ω–∏—è –º–∞—Å–∏–≤, –∫–æ–∏—Ç–æ
//—É–¥–æ–≤–ª–µ—Ç–≤–æ—Ä—è–≤–∞—Ç –ø—Ä–µ–¥–∏–∫–∞—Ç–∞.
//–ü—Ä–∏–º–µ—Ä: bool isEven( int num ) { return num % 2 == 0; }
//–í—Ö–æ–¥: ( [ 1, 5, 6, 2, 0 ], isEven )
//–ò–∑—Ö–æ–¥: [ 6, 2, 0 ] / –Ω–æ–≤ –º–∞—Å–∏–≤

template<typename T, class Predicate>
std::vector<T> &filter(std::vector<T> &vector, Predicate pred) {
    std::vector<T> newVector;
    for (const auto &item: vector) {
        if (pred(item)) {
            newVector.push_back(item);
        }
    }
    vector.clear();
    for (const auto &item: newVector) {
        vector.push_back(item);
    }
    return vector;
}

//6. –ü–æ –ø–æ–¥–∞–¥–µ–Ω–æ —á–∏—Å–ª–æ ùëò ‚àà [ 1; ùëõ ] –≤—Ä—ä—â–∞ –∏—Ç–µ—Ä–∞—Ç–æ—Ä (—É–∫–∞–∑–∞—Ç–µ–ª) –∫—ä–º
//k-—Ç–∏—è –ø–æ –≥–æ–ª–µ–º–∏–Ω–∞ –µ–ª–µ–º–µ–Ω—Ç –æ—Ç –º–∞—Å–∏–≤–∞.
//–°–ª–æ–∂–Ω–æ—Å—Ç—Ç–∞ –ø–æ –≤—Ä–µ–º–µ –¥–∞ –±—ä–¥–µ ùëÇ( ùëõ * ùëò ).
template<typename T>
std::vector<T>::iterator getKthBigElement(std::vector<T> &vector, int k) {
    if (k > vector.size() || k < 1) {
        throw std::invalid_argument("K out of boundaries!");
    }
    std::vector<T> copy = vector;

    for (int i = 0; i < copy.size(); ++i) {
        for (int j = i + 1; j < copy.size(); ++j) {
            if (copy[i] < copy[j]) {
                std::swap(copy[i], copy[j]);
            }
        }
    }
    return (std::find(vector.begin(), vector.end(), copy[k - 1]));
}


//7. –í—Ä—ä—â–∞ –Ω–æ–≤ –º–∞—Å–∏–≤ —Å—ä–¥—ä—Ä–∂–∞—â —Å–∞–º–æ –Ω–µ–ø–æ–≤—Ç–∞—Ä—è—â–∏—Ç–µ —Å–µ –µ–ª–µ–º–µ–Ω—Ç–∏
//–Ω–∞ –æ—Ä–∏–≥–∏–Ω–∞–ª–Ω–∏—è.
//–°–ª–æ–∂–Ω–æ—Å—Ç—Ç–∞ –ø–æ –≤—Ä–µ–º–µ –¥–∞ –±—ä–¥–µ ùëÇ( ùëõ * ùëôùëúùëî(ùëõ) ).
//use contains()
template<typename T>
std::vector<T> &unique(std::vector<T> &vector) {
   std::vector<T> newVector;
    for (const auto &item: vector) {
        if (!contains(newVector, item)) {
            newVector.push_back(item);
        }
    }
    vector.clear();
    for (const auto &item: newVector) {
        vector.push_back(item);
    }
    return vector;
}

template <typename T>
int search(std::vector<T> & vector, T target) {
    int left = 0;
    int right = vector.size() - 1;

    while (left <= right) {
        int mid = left + (right - left) / 2;

        if (vector[mid] == target) {
            return mid;
        } else if (target > vector[mid]) {
            left = mid + 1;
        } else {
            right = mid -1;
        }
    }
    return -1;
}

template <typename T>
std::vector<T> inorderTraversal(Node<T> * root) {

    if (!root)
        return {};

    std::vector<T> left = inorderTraversal(root->left);
    left.push_back(root->val);
    std::vector<T> right = inorderTraversal(root->right);

    left.insert(left.end(), right.begin(), right.end());
    return left;
}


int main() {
    Node<int> * root = new Node<int>(1, new Node<int>(2,
                                                      new Node<int>(4), new Node<int>(5)),
                                            new Node<int>(3));
    std::vector<int> result = inorderTraversal(root);
    for (const auto &item: result) {
        std::cout << item << " ";
    }
}
